name: recommendation-system
services:
  admin:
    build: 
      context: https://github.com/ZPI-Recommendation-System/Recommendation-admin.git
      args:
        - REACT_APP_API_URL=http://zpi.zgrate.ovh:5041/api
        - PUBLIC_URL=http://zpi.zgrate.ovh:5041/admin
    env_file:
      - config/.admin-env
    networks:
      - frontend
    ports:
      - '3001:3000'
    restart: always
    hostname: admin
    healthcheck:
      test: "exit 0"
    depends_on:
      backend:
        condition: service_healthy

  frontend:
    build: 
      context: https://github.com/ZPI-Recommendation-System/Recommendation-Frontend.git
      args:
        - REACT_APP_API_URL=http://zpi.zgrate.ovh:5041/api
    env_file:
      - config/.frontend-env
    networks:
      - frontend
    ports:
      - '3002:3000'
    restart: always
    hostname: frontend
    healthcheck:
      test: "exit 0"
    depends_on:
      backend:
        condition: service_healthy

  backend:
    build: https://github.com/ZPI-Recommendation-System/Recommendation-Backend.git
    env_file:
      - config/.backend-env
    networks:
      - backend
      - frontend
    restart: always
    hostname: backend
    ports:
      - '5036:3000'
    healthcheck:
      test: "exit 0"
    depends_on:
      db:
        condition: service_healthy
      scraper:
        condition: service_healthy

  scraper:
    build: https://github.com/ZPI-Recommendation-System/Scapper-System.git
    env_file:
      - config/.scraper-env
      - app.cfg
    networks:
      - backend
    healthcheck:
      test: "exit 0"
    hostname: scraper

  db:
    image: postgres
    volumes:
      - ./config/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    restart: always
    hostname: db
    networks:
      - backend
    env_file:
      - config/.db-env
    ports:
      - '5532:5432'
    healthcheck:
      test: "exit 0"

  nginx:
    image: nginx:alpine
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always
    hostname: nginx_main
    networks:
      - frontend
      - backend
    ports:
      - '80:80'

networks:
  backend: {}
  frontend: {}
